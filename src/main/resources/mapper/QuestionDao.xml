<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dao.QuestionDao">
    <!--获取标签-->
    <select id="selectAllTag" resultType="com.bean.Tag">
        SELECT * FROM tag
    </select>
    <!--获取问题分页信息-->
    <select id="selectQuestionsByPage" resultType="com.bean.Question">
        SELECT * FROM question ORDER BY createTime DESC  limit #{currentPage},#{pageSize}
    </select>
    <!--添加问题-->
    <insert id="insertQuestion" parameterType="com.bean.Question" useGeneratedKeys="true" keyProperty="questionId">
        INSERT INTO question (title,content,tagId,imgUrls,accountId) VALUES (#{title},#{content},#{tagId},#{imgUrls},#{accountId})
    </insert>
    <!--获取问题数量-->
    <select id="selectQuestionCount" resultType="int">
       select count(*) from question
    </select>

    <!--根据问题Id获取问题详情-->
    <select id="selectQuestionById" resultType="com.bean.Question">
       select questionId,title,content,imgUrls,tagId,createTime from question WHERE questionId=#{questionId}
    </select>

    <!--根据问题Id获取提问者信息-->
    <select id="selectAccountByQuestionId" resultType="com.bean.Account">
      SELECT account.accountId, account.name, account.avatar
      FROM question INNER JOIN account
      ON account.accountId=question.accountId
      WHERE question.questionId=#{questionId}
    </select>
    <!--根据问题Id获取回答-->
    <select id="selectAnsewersByQuestionId" resultType="com.bean.AnswerResult">
        SELECT question.questionId,account.accountId,account.name,account.avatar,answer.answerId,answer.content,answer.createTime,answer.praiseCount,answer.collectCount
        FROM answer
        LEFT JOIN question
        ON answer.questionId=question.questionId
        LEFT JOIN account
        ON answer.accountId=account.accountId 
        WHERE question.questionId=#{questionId}
        ORDER BY answer.createTime DESC
  </select>
    <!--增加点赞数量-->
    <update id="addPraise">
        UPDATE answer SET praiseCount=praiseCount+1 WHERE answerId=#{answerId}
    </update>
    <!--获取点赞数量-->
    <select id="selectPraiseCountByAnswerId" resultType="int">
        select praiseCount from answer WHERE answerId=#{answerId}
    </select>
    <!--查找是否收藏过-->
    <select id="selectPraiseRecord" resultType="int">
        select count(*) FROM praise WHERE accountId=#{accountId} AND answerId=#{answerId}
    </select>
    <!--收藏记录表，防止重复点赞-->
    <insert id="insertPraiseRecord">
        INSERT INTO praise (accountId,answerId) VALUES (#{accountId},#{answerId})
    </insert>
    <!--收藏问题-->
    <insert id="addCollect">
        INSERT INTO collect (accountId,questionId) VALUE (#{accountId},#{questionId})
    </insert>
    <!--取消收藏问题-->
    <delete id="cancelCollect">
        DELETE FROM collect WHERE accountId=#{accountId} AND questionId=#{questionId}
    </delete>
    <!--判断是否收藏过-->
    <select id="selectIfCollect" resultType="int">
        select count(*) FROM collect WHERE accountId=#{accountId} AND questionId=#{questionId}
    </select>
    <!--回答问题-->

    <insert id="answerQuestion">
        INSERT INTO answer (accountId,questionId,content,imgUrls) VALUES (#{accountId},#{questionId},#{content},#{imgUrls})
    </insert>


    <!--APP=========================================================-->


    <select id="getQuestionsBySolved" resultType="com.appbean.AppQuestion">
        select (select COUNT(*)FROM answer WHERE answer.questionId=question.questionId) AS answerCount,
        (select COUNT(*) FROM collect WHERE collect.accountId=#{accountId} AND collect.questionId=question.questionId)AS
        isCollected,
        (select COUNT(*) FROM attention WHERE attention.myAccountId=#{accountId} AND
        attention.otherAccountId=question.accountId) AS isAttentioned,
        account.`name`,account.avatar,account.experience,question.questionId,question.accountId,question.title,question.content,question.imgUrls,question.solved,question.collectCount,question.createTime,question.tagId
        FROM question LEFT JOIN account
        ON question.accountId=account.accountId
        <if test="solved!=-1">
            WHERE question.solved=#{solved}
        </if>
        ORDER BY question.createTime DESC
        limit #{pageIndex},#{pageSize}
    </select>
    <!--根据问题Id获取回答-->
    <select id="getAnswers" resultType="com.appbean.AppAnswer">
        SELECT
         (select COUNT(*)FROM praise WHERE praise.answerId=answer.answerId)AS praiseCount,
         (select COUNT(*) FROM praise WHERE praise.accountId=#{accountId} AND praise.answerId=answer.answerId) AS isPraised,
         question.questionId,account.accountId,account.name,account.avatar,answer.answerId,answer.content,answer.createTime,answer.imgUrls
        FROM answer
        LEFT JOIN question
        ON answer.questionId=question.questionId
        LEFT JOIN account
        ON answer.accountId=account.accountId
        WHERE question.questionId=#{questionId}
        ORDER BY answer.createTime DESC
        limit #{pageIndex},#{pageSize}
    </select>

    <insert id="publish">
        INSERT INTO question (title,content,tagId,imgUrls,accountId) VALUES (#{title},#{content},#{tagId},#{imgUrls},#{accountId})
    </insert>

    <insert id="answer">
        INSERT INTO answer (accountId,questionId,content,imgUrls) VALUES (#{accountId},#{questionId},#{content},#{imgUrls})
    </insert>

    <insert id="collect">
        INSERT INTO collect (accountId,questionId) VALUES (#{accountId},#{questionId})
    </insert>

    <delete id="cancleCollect">
        DELETE FROM collect WHERE accountId=#{accountId} AND  questionId=#{questionId}
</delete>


    <insert id="attention">
        INSERT INTO attention (myAccountId,otherAccountId) VALUES (#{accountId},#{otherAccountId})
    </insert>

    <delete id="cancleAttention">
        DELETE FROM attention WHERE myAccountId=#{accountId} AND  otherAccountId=#{otherAccountId}
    </delete>


    <insert id="praise">
        INSERT INTO praise (accountId,answerId) VALUES (#{accountId},#{answerId})
    </insert>


    <select id="getMyQuestions" resultType="com.appbean.AppQuestion">
        select (select COUNT(*)FROM answer WHERE answer.questionId=question.questionId) AS answerCount,
        (select COUNT(*) FROM collect WHERE collect.accountId=#{accountId} AND collect.questionId=question.questionId)AS isCollected,
        (select COUNT(*) FROM attention WHERE attention.myAccountId=#{accountId} AND attention.otherAccountId=question.accountId) AS isAttentioned,
        question.accountId,account.`name`,account.avatar,account.experience,question.questionId,question.accountId,question.title,question.content,question.imgUrls,question.solved,question.collectCount,question.createTime,question.tagId
        FROM question LEFT JOIN account
        ON question.accountId=account.accountId
        WHERE question.accountId=#{accountId}
        ORDER BY question.createTime DESC
        limit #{pageIndex},#{pageSize}
    </select>

    <select id="getOtherQuestions" resultType="com.appbean.AppQuestion">
        select (select COUNT(*)FROM answer WHERE answer.questionId=question.questionId) AS answerCount,
        (select COUNT(*) FROM collect WHERE collect.accountId=#{accountId} AND collect.questionId=question.questionId)AS isCollected,
        (select COUNT(*) FROM attention WHERE attention.myAccountId=#{accountId} AND attention.otherAccountId=question.accountId) AS isAttentioned,
        question.accountId,account.`name`,account.avatar,account.experience,question.questionId,question.accountId,question.title,question.content,question.imgUrls,question.solved,question.collectCount,question.createTime,question.tagId
        FROM question LEFT JOIN account
        ON question.accountId=account.accountId
        WHERE question.accountId=#{otherAccountId}
        ORDER BY question.createTime DESC
        limit #{pageIndex},#{pageSize}
    </select>

    <select id="getMyAnswers" resultType="com.appbean.AppMyAnswer">
        select answer.content AS answerContent ,answer.imgUrls AS answerImgUrls,answer.createTime AS answerTime,
        (select COUNT(*)FROM answer WHERE answer.questionId=question.questionId) AS answerCount,
        (select COUNT(*)FROM praise WHERE answer.answerId=praise.answerId) AS praiseCount,
        (select COUNT(*) FROM collect WHERE collect.accountId=#{accountId} AND collect.questionId=question.questionId)AS isCollected,
        (select COUNT(*) FROM attention WHERE attention.myAccountId=#{accountId} AND attention.otherAccountId=question.accountId) AS isAttentioned,
        account.`name`,account.avatar,account.experience,question.questionId,question.accountId,question.title,question.content,question.imgUrls,question.solved,question.collectCount,question.createTime,question.tagId
        FROM answer
        LEFT JOIN question
        ON answer.questionId=question.questionId
        LEFT JOIN account
        ON question.accountId=account.accountId
        WHERE answer.accountId=#{accountId}
        ORDER BY answer.createTime DESC
        limit #{pageIndex},#{pageSize}
    </select>

    <select id="getOtherAnswers" resultType="com.appbean.AppMyAnswer">
        select answer.content AS answerContent ,answer.imgUrls AS answerImgUrls,answer.createTime AS answerTime,
        (select COUNT(*)FROM answer WHERE answer.questionId=question.questionId) AS answerCount,
        (select COUNT(*)FROM praise WHERE answer.answerId=praise.answerId) AS praiseCount,
        (select COUNT(*) FROM collect WHERE collect.accountId=#{accountId} AND collect.questionId=question.questionId)AS isCollected,
        (select COUNT(*) FROM attention WHERE attention.myAccountId=#{accountId} AND attention.otherAccountId=question.accountId) AS isAttentioned,
        account.`name`,account.avatar,account.experience,question.questionId,question.accountId,question.title,question.content,question.imgUrls,question.solved,question.collectCount,question.createTime,question.tagId
        FROM answer
        LEFT JOIN question
        ON answer.questionId=question.questionId
        LEFT JOIN account
        ON question.accountId=account.accountId
        WHERE answer.accountId=#{otherAccountId}
        ORDER BY answer.createTime DESC
        limit #{pageIndex},#{pageSize}
    </select>

</mapper>